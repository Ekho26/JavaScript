{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Todo","props","List","className","ListItem","ListItemText","primary","todo","secondary","Button","onClick","event","collection","doc","id","delete","App","useState","todos","setTodos","input","setInput","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","value","onChange","target","variant","color","href","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oWAeeA,EAbKC,IAASC,cAAc,CACnCC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGAC,YCORC,MAff,SAAcC,GACV,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,aACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAcC,QAASL,EAAMM,KAAKA,KAAMC,UAAU,UAEtD,kBAACC,EAAA,EAAD,CAAQC,QAAS,SAAAC,GACbvB,EAAGwB,WAAW,SAASC,IAAIZ,EAAMM,KAAKO,IAAIC,cCoD3CC,MAxDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGaF,mBAAS,IAHtB,mBAGNG,EAHM,KAGCC,EAHD,KA8Bb,OAtBAC,qBAAU,WAERlC,EAAGwB,WAAW,SAASW,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAC7DN,EAASM,EAASC,KAAKC,KAAI,SAAAd,GAAG,OAAIA,EAAIe,OAAOrB,cAE9C,IAkBD,yBAAKJ,UAAU,OACb,oCACE,8BACE,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,mBACA,kBAACC,EAAA,EAAD,CAAOC,MAAQZ,EAAOa,SAAW,SAAAtB,GAAK,OAAIU,EAASV,EAAMuB,OAAOF,WAElE,kBAACvB,EAAA,EAAD,CAAQ0B,QAAQ,YACRC,MAAM,UACNC,KAAK,qBACLC,KAAK,SACL5B,QA3BA,SAACC,GAEfA,EAAM4B,iBAENnD,EAAGwB,WAAW,SAAS4B,IAAI,CACzBjC,KAAMa,EACNqB,UAAWpD,IAASU,UAAU2C,WAAWC,oBAM3CtB,EAAS,KAgBKuB,UAAYxB,GAChB,kBAAC,IAAD,QAGR,4BACGF,EAAMS,KAAI,SAAApB,GAAI,OACb,kBAAC,EAAD,CAAMA,KAAMA,UC7CFsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e9a584c3.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n        apiKey: \"AIzaSyDu7xR9MRt9nmR9YxiPDe40Bz60ojf9U7A\",\r\n        authDomain: \"todo-project-7fdf6.firebaseapp.com\",\r\n        databaseURL: \"https://todo-project-7fdf6.firebaseio.com\",\r\n        projectId: \"todo-project-7fdf6\",\r\n        storageBucket: \"todo-project-7fdf6.appspot.com\",\r\n        messagingSenderId: \"263673182145\",\r\n        appId: \"1:263673182145:web:4a6bfda396f8dddd11e140\",\r\n        measurementId: \"G-02V00GCH0E\"\r\n})\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React from 'react';\r\nimport './Todo.css';\r\nimport { List, ListItem, ListItemText, Button} from '@material-ui/core';\r\nimport db from './firebase';\r\n\r\nfunction Todo(props) {\r\n    return (\r\n        <List className='todo_list'>\r\n            <ListItem>\r\n                <ListItemText primary={props.todo.todo} secondary='Task'/>\r\n            </ListItem>\r\n            <Button onClick={event => {\r\n                db.collection('todos').doc(props.todo.id).delete()\r\n            }}>\r\n\r\n            </Button>\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useEffect } from 'react'\nimport { FormControl, Button, InputLabel, Input } from '@material-ui/core'\nimport PostAddIcon from '@material-ui/icons/PostAdd'\nimport './App.css'\nimport Todo from './Todo.js'\nimport db from './firebase'\nimport firebase from 'firebase'\n\nfunction App() {\n\n  const [todos, setTodos] = useState([])\n  const [input, setInput] = useState('')\n  // console.log(input);\n\n  // when the app loads, we need to listen \n  // to the database and fetch new todos as they get added/removed\n  useEffect(() => {\n    // this code loads when the app loads\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => doc.data().todo))\n    })\n  }, [])\n\n  const addTodo = (event) => {\n    // prevents the refreshing of the page when we add items to the list\n    event.preventDefault()\n\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    // this will fire up when we click the button\n    // console.log(\"I'm working\");\n    // using spread operator (adding to the end the new todos) ...\n    // setTodos([...todos, input]);\n    setInput('')  // this will set up the input to black after submitting the input\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Todo</h1>\n        <form>\n          <FormControl>\n            <InputLabel>Add a task</InputLabel>\n            <Input value= {input} onChange= {event => setInput(event.target.value)}/>\n          </FormControl>\n          <Button variant=\"contained\" \n                  color=\"primary\" \n                  href=\"#contained-buttons\"\n                  type=\"submit\"\n                  onClick= {addTodo}\n                  disabled= {!input}>\n              <PostAddIcon/>\n          </Button>\n        </form>\n      <ul>\n        {todos.map(todo => (\n          <Todo todo={todo}/>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}